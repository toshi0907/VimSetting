set fileencodings=euc-jp,sjis,cp932,iso-2022-jp,utf-8
set autoread

au QuickfixCmdPost make,grep,grepadd,vimgrep copen

set scrolloff=999 " 常にカーソルを中心に
set nf="" " 数字はすべて10進数として扱う

" autocmd ColorScheme * highlight LineNr ctermbg=1
" autocmd ColorScheme * highlight LineNr ctermbg=0
" autocmd ColorScheme * highlight Normal ctermbg=0
" グループ名参考
" http://tech.alters.co.jp/vimrc/vimrc%E3%81%AEcolor%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E4%B8%80%E8%A6%A7/

set tags=./tags

set listchars=trail:_
set list

set number " 行番号の表示
" set relativenumber " 現在行からのオフセット行数表示
syntax on " シンタックスハイライト
set title

set nowritebackup
set nobackup
set noswapfile

" ### Search ###
set ignorecase " 大文字小文字の区別なし
set smartcase " 小文字検索時 大文字小文字の区別なし
set hlsearch " インクリメントサーチ
set incsearch " 検索結果をハイライト
set wrapscan " 末尾まで検索したらファイル先頭に戻る

" ### 表示関係 ###
set showmatch matchtime=1 " 対応する括弧を表示
set showcmd " ウインドウ右下に入力中のコマンドを表示
set cmdheight=2 " 表示欄を2行に
set laststatus=2 " ステータス行を常に表示
set cmdheight=2 " ステータス行を2行に
" set statusline=File[%f]\ Line:%l\ %p[%{'%'}]%=\ %{'['.(&fenc!=''?&fenc:&enc).']'}\ Buf:%n " Vimデフォルトでの設定

" hi Comment ctermfg=3 " コメントの色変更

set expandtab " タブ入力で半角スペース
set shiftwidth=2 "
set softtabstop=2
set tabstop=2

set smartindent
set autoindent

" set cursorcolumn " 強調表示
set cursorline " 強調表示

" 全角空白を表示
hi ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/

set wildmenu " コマンドの補完をメニュー形式で

""" キーマッピング

" 自分用メモを開く
nnoremap <C-t> :e ~/.vim/note.md<CR>:Search ^##<CR>:Voom markdown<CR><C-w>h

" コンフリクト箇所へ移動
nnoremap cn :SearchBuffers \(^<<<<<<<\\|^>>>>>>>\\|^=======$\)<CR>n
nnoremap cb :SearchBuffers \(^<<<<<<<\\|^>>>>>>>\\|^=======$\)<CR><S-n>

" 文字コード変更
" nnoremap <expr><leader><C-e> ':e ++enc=euc-jp<CR>'
command! EncChangeEucjp :e ++enc=euc-jp<CR>
command! EncChangeSjis :e ++enc=sjis<CR>
command! EncChangeUtf8 :e ++enc=utf-8<CR>
" nnoremap <expr><C-e> ':e ++enc=utf-8<CR>'

:command! VIMRC   :source ~/.vimrc

" command setting should define by using CAPITAL first
" command! q :q!
" command! qa :qa!
" command! wq :wq!
" command! wqa :wqa!

" jjでエスケープ
inoremap <silent> jj <ESC>

" 入力モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

let mapleader = "\<Space>"
nnoremap <leader>y viwy
nnoremap <leader>p viw"0P

" ウインドウ ※どちらかの方式にまとめる
nnoremap <leader>k <C-w>k
nnoremap <leader>j <C-w>j
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

nnoremap <leader>tn :tabNext<CR>
nnoremap <leader>tp :tabprevious<CR>
nnoremap <leader>to :tabnew<CR>

nnoremap <leader>i viwy<ESC>jviw"0P<ESC><C-a>
nnoremap <leader>d viwy<ESC>jviw"0P<ESC><C-x>

" 画面描画
" nnoremap k k<C-l>
" nnoremap j j<C-l>

if has('vim_starting')
     " 初回起動時のみruntimepathにneobundleのパスを指定する
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" NeoBundleを初期化
call neobundle#begin(expand('~/.vim/bundle/'))

" インストールするプラグインをここに記述
NeoBundle 'Shougo/unite.vim'

nnoremap <leader>b :Unite buffer<CR>
" nnoremap <leader>f :Unite file<CR>

NeoBundle 'Shougo/vimfiler'

NeoBundle 'Lokaltog/vim-easymotion'
" gitの差分を表示
NeoBundle 'airblade/vim-gitgutter'
" let g:gitgutter_highlight_lines = 1
" let g:gitgutter_override_sign_column = 0
" highlight SignColumn ctermbg=blue
" highlight GitGutterAdd ctermfg=black ctermbg=black
" highlight GitGutterAddLine ctermfg=white ctermbg=green
set updatetime=500 " git更新タイミング[ms]

NeoBundle 'tpope/vim-fugitive'

" 補完

" 補完表示時のEnterで改行をしない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"

" 補完ウインドウ上下キーで移動
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"

NeoBundle 'Shougo/neocomplete.vim'
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" Install vim-clang
NeoBundle 'justmao945/vim-clang'

let g:clang_auto = 0 " disable autocomplete
let g:clang_diagsopt = ''   " <- disable diagnostics

" set clang options for vim-clang
" let g:clang_c_options = '-std=c11'
" let g:clang_cpp_options = '-std=c++1z -stdlib=libc++ --pedantic-errors'
" let g:clang_c_options = '-std=c11'
" let g:clang_cpp_options = '-std=c++1z -stdlib=libc++ --pedantic-errors'

" この変換を使用するには行選択「V」が必要
vmap <C-F> :!clang-format<CR>
nnoremap <C-F> <S-v>:!clang-format<CR><S-v>=j

" vim grep
NeoBundle 'vim-scripts/grep.vim'
nnoremap <expr> gr ':Rgrep -i <CR>' " grコマンドでGREP発動

let Grep_Skip_Dirs = '.svn .git CVS'  "無視するディレクトリ
let Grep_Skip_Files = '*.bak *~ tags .#* *.orig *.nkftmp* *.Debug *.Release *.moc *.o *.rej' "無視するファイル
let Grep_Default_Options = '-I'   "バイナルファイルがgrepしない

" StatusLineカスタマイズ
NeoBundle 'itchyny/lightline.vim'
set t_Co=256

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'absolutepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }


" Tagリスト拡張
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'szw/vim-tags'

let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1 " タグリストだけが表示されているときに自動的にVimを終了するか
let Tlist_Use_Right_Window = 1 " タグ画面を右に表示するか
let Tlist_Compact_Format = 1 "デフォルト表示かコンパクト表示か
let Tlist_WinWidth = 60 "画面を左右に分割した場合の、タグ画面の初期幅
let Tlist_GainFocus_On_ToggleOpen = 1 "開いたときにTlistへ移動

" nnoremap tl :Tlist<CR><C-w>l<CR><C-w>l<CR><C-w>l
nnoremap tl :Tlist<CR>

" 自動保存
NeoBundle 'vim-scripts/vim-auto-save'
let g:auto_save = 1 " 常に自動保存
let g:auto_save_in_insert_mode = 0 " インサートモード中は保存しない

" カラー関係
NeoBundle 'ujihisa/unite-colorscheme'
" コマンド ＝＞ :Unite colorscheme -auto-preview

NeoBundle 'tomasr/molokai'
NeoBundle 'croaker/mustang-vim'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'altercation/vim-colors-solarized'

" $(home)/.vim/colors というディレクトリを作成する
" $(home)/.vim/bundle/molokai/colors/molokai.vim ファイルを上記のフォルダへ放り込む というディレクトリを作成する

set background=dark
colorscheme molokai
" colorscheme solarized
" colorscheme evening

" MultipleSearch
NeoBundle 'vim-scripts/MultipleSearch'
let g:MultipleSearchMaxColors = 8
let g:MultipleSearchColorSequence = "yellow, yellow, yellow, yellow, yellow, yellow, yellow, yellow"
let g:MultipleSearchTextColorSequence = "red, red, red, red, red, red, red, red"

" 標準の検索を置き換え
nnoremap / :Search 
nnoremap * viwy:Search <C-r>"

" ESC連打でハイライト解除
nnoremap <ESC><ESC> :SearchBuffersReset<CR>:nohlsearch<CR>

" 末尾の全角と半角の空白文字を赤くハイライト
" NeoBundle 'bronson/vim-trailing-whitespace'

" インデントの可視化
" NeoBundle 'Yggdroot/indentLine'

NeoBundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 'c' " default ra
let g:ctrlp_switch_buffer = '0' " don't jump
let g:ctrlp_max_depth = 4

" bookmark
NeoBundle 'mattesgroeger/vim-bookmarks'
let g:bookmark_sign = '>>'
" default key map
nmap mm :BookmarkToggle<CR>
nmap mn :BookmarkNext<CR>
nmap mp :BookmarkPrev<CR>
nmap ma :BookmarkShowAll<CR>
nmap mx :BookmarkClearAll<CR>

" Markdown
NeoBundle 'tpope/vim-markdown'
let g:markdown_fenced_languages = ['cpp', 'bash=sh']

NeoBundle 'LeafCage/yankround.vim'
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>
" nmap <C-m> <Plug>(yankround-prev)
" nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
" :CtrlPYankRound
" `<CR>`で、その履歴をカーソル位置の前に挿入します。`P`
" `<C-v>`で、その履歴をカーソル位置の後ろに挿入します。`p`
" `<C-s>`(`<C-x>`, `<C-CR>`)で、無名レジスタ `"` にその履歴をセットします。
" `<C-z>`でマークして、`<F7>`でその履歴を履歴から削除します。

let g:yankround_use_region_hl = 1

NeoBundle 'aklt/plantuml-syntax'

NeoBundle 'zivyangll/git-blame.vim'
nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

NeoBundle 'simeji/winresizer'
" Ctrl + E でリサイズ開始 Enterで確定

NeoBundle 'tpope/vim-surround'

NeoBundle 'vim-scripts/VOoM'

call neobundle#end()

" ファイルタイプ別のプラグイン/インデントを有効にする
filetype plugin indent on

NeoBundleCheck

source ~/.vim/mySetting.vim " 環境ごとに変えたい設定

